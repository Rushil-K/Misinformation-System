import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import onnx

# Step 1: Load a Pre-trained Model for Deepfake Detection
class DeepfakeDetector(nn.Module):
    def __init__(self):
        super(DeepfakeDetector, self).__init__()
        self.model = models.efficientnet_b0(pretrained=True)  # Use EfficientNet
        num_features = self.model.classifier[1].in_features
        self.model.classifier[1] = nn.Linear(num_features, 2)  # 2 classes (Real, Fake)

    def forward(self, x):
        return self.model(x)

# Initialize model and set to eval mode
model = DeepfakeDetector()
model.eval()

# Step 2: Convert Model to ONNX Format
dummy_input = torch.randn(1, 3, 224, 224)  # Dummy input with batch size 1
onnx_file_path = "deepfake_detector.onnx"

torch.onnx.export(
    model, 
    dummy_input, 
    onnx_file_path, 
    input_names=["input"], 
    output_names=["output"], 
    opset_version=11
)

# Step 3: Verify the ONNX Model
onnx_model = onnx.load(onnx_file_path)
onnx.checker.check_model(onnx_model)

print(f"ONNX model saved as {onnx_file_path}")
